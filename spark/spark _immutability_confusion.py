# Databricks notebook source
# MAGIC %md
# MAGIC ## Confus√£o sobre imutabilidade no Spark - RDD e DataFrame
# MAGIC Entenda de forma clara a diferen√ßa entre vari√°vel, refer√™ncia e objeto.
# MAGIC Saiba porque as transforma√ß√µes em Spark criam novos objetos, mantendo o princ√≠pio da imutabilidade.
# MAGIC
# MAGIC ``Imut√°vel = uma vez criado, n√£o pode ser alterado.``
# MAGIC
# MAGIC ``Altera√ß√µes no objeto via uma refer√™ncia ser√£o vis√≠veis por todas as vari√°veis que o referenciam (no caso de objetos mut√°veis).``

# COMMAND ----------

# MAGIC %md
# MAGIC | Termo          | Defini√ß√£o simples                                          |
# MAGIC | -------------- | ---------------------------------------------------------- |
# MAGIC | **Objeto**     | Valor real armazenado na mem√≥ria (ex: `"Pizza"`, DataFrame). |
# MAGIC | **Refer√™ncia** | Ponteiro ou endere√ßo que aponta para o objeto.             |
# MAGIC | **Vari√°vel**   | Nome que voc√™ usa no c√≥digo para acessar o objeto.         |
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ### Probelma 1
# MAGIC Uma vari√°vel aponta para uma refer√™ncia, que aponta para um objeto.
# MAGIC
# MAGIC ``‚üπ Etiqueta ‚üπ Referencia ‚üπ Objeto``

# COMMAND ----------


comida = "Pizza"

comida2 = comida

comida = comida[:2]

# Ver resultados
print(f"comida: {comida} \n" )

print(f"comida2:  {comida2}" )

# "Se 'comida2' √© igual a 'comida', ent√£o se 'comida' mudar, 'comida2' muda tamb√©m."

# COMMAND ----------

# MAGIC %md
# MAGIC ### Explica√ß√£o
# MAGIC - `comida[:2]` cria um novo objeto com o valor `"Pi"`.
# MAGIC
# MAGIC - `comida` agora passa a apontar para esse novo objeto.
# MAGIC
# MAGIC - Mas `comida2` ainda est√° apontando para o antigo `"Pizza"`.

# COMMAND ----------

# MAGIC %md
# MAGIC ### Prova t√©cnica

# COMMAND ----------


print(f"Referencia: {id(comida)}, comida: {comida} \n" )

print(f"Referencia: {id(comida2)}, comida2:  {comida2}" )

# COMMAND ----------

# MAGIC %md
# MAGIC ### Exemplo equivalente com PySpark DataFrame
# MAGIC - DataFrame em PySpark √© uma camada tabular sobre RDDs, e tamb√©m segue o princ√≠pio de imutabilidade

# COMMAND ----------

# DataFrame original
df = spark.createDataFrame([("üçî",), ("üçü",), ("üçï",)], ["comida"])

print(f"Referencia: {id(df)}, df: {df.take(3)}")

# COMMAND ----------

# Refer√™ncia para o mesmo DataFrame
df2 = df

# Filtrar para remover a üçï
df = df.filter("comida != 'üçï'")

# Mostrar resultados
print("DataFrame df:")
df.show()

print("DataFrame df2:")
df2.show()


# COMMAND ----------

df.explain(True)

# COMMAND ----------

# MAGIC %md
# MAGIC ### Explica√ß√£o
# MAGIC - `df2` mant√©m o DataFrame original com a  `'üçï'`.
# MAGIC
# MAGIC - `df` agora √© um novo DataFrame sem a `'üçï'`, criado a partir de uma transforma√ß√£o (filter()). Com um novo plano l√≥gico de execu√ß√£o (query plan).
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ### Prova t√©cnica com .explain()

# COMMAND ----------

print(f"Referencia: {id(df)}, df: {df.take(3)} \n")

print(f"Referencia: {id(df2)}, df2: {df2.take(3)}")


# COMMAND ----------

# MAGIC %md
# MAGIC ### Referncia
# MAGIC https://docs.python.org/3/reference/datamodel.html
# MAGIC
# MAGIC https://www.pythonmorsels.com/pointers/
# MAGIC
# MAGIC `The value of some objects can change. Objects whose value can change are said to be mutable; objects whose value is unchangeable once they are created are called immutable. (The value of an immutable container object that contains a reference to a mutable object can change when the latter‚Äôs value is changed; however the container is still considered immutable, because the collection of objects it contains cannot be changed. So, immutability is not strictly the same as having an unchangeable value, it is more subtle.) An object‚Äôs mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable.`
